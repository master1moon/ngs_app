// Generated by view binder compiler. Do not edit!
package com.ngs.cards775396439.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import com.ngs.cards775396439.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemStoreBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final MaterialButton btnDeleteStore;

  @NonNull
  public final MaterialButton btnEditStore;

  @NonNull
  public final MaterialButton btnViewDetails;

  @NonNull
  public final Chip chipPriceType;

  @NonNull
  public final TextView tvCreatedDate;

  @NonNull
  public final TextView tvStoreName;

  private ItemStoreBinding(@NonNull MaterialCardView rootView,
      @NonNull MaterialButton btnDeleteStore, @NonNull MaterialButton btnEditStore,
      @NonNull MaterialButton btnViewDetails, @NonNull Chip chipPriceType,
      @NonNull TextView tvCreatedDate, @NonNull TextView tvStoreName) {
    this.rootView = rootView;
    this.btnDeleteStore = btnDeleteStore;
    this.btnEditStore = btnEditStore;
    this.btnViewDetails = btnViewDetails;
    this.chipPriceType = chipPriceType;
    this.tvCreatedDate = tvCreatedDate;
    this.tvStoreName = tvStoreName;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemStoreBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemStoreBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_store, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemStoreBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnDeleteStore;
      MaterialButton btnDeleteStore = ViewBindings.findChildViewById(rootView, id);
      if (btnDeleteStore == null) {
        break missingId;
      }

      id = R.id.btnEditStore;
      MaterialButton btnEditStore = ViewBindings.findChildViewById(rootView, id);
      if (btnEditStore == null) {
        break missingId;
      }

      id = R.id.btnViewDetails;
      MaterialButton btnViewDetails = ViewBindings.findChildViewById(rootView, id);
      if (btnViewDetails == null) {
        break missingId;
      }

      id = R.id.chipPriceType;
      Chip chipPriceType = ViewBindings.findChildViewById(rootView, id);
      if (chipPriceType == null) {
        break missingId;
      }

      id = R.id.tvCreatedDate;
      TextView tvCreatedDate = ViewBindings.findChildViewById(rootView, id);
      if (tvCreatedDate == null) {
        break missingId;
      }

      id = R.id.tvStoreName;
      TextView tvStoreName = ViewBindings.findChildViewById(rootView, id);
      if (tvStoreName == null) {
        break missingId;
      }

      return new ItemStoreBinding((MaterialCardView) rootView, btnDeleteStore, btnEditStore,
          btnViewDetails, chipPriceType, tvCreatedDate, tvStoreName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
