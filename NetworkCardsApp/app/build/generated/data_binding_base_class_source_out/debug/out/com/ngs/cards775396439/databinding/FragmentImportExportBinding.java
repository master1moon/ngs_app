// Generated by view binder compiler. Do not edit!
package com.ngs.cards775396439.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.ngs.cards775396439.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentImportExportBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton btnBackupDatabase;

  @NonNull
  public final MaterialButton btnExportAll;

  @NonNull
  public final MaterialButton btnImportAll;

  @NonNull
  public final LinearLayout loadingState;

  private FragmentImportExportBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton btnBackupDatabase, @NonNull MaterialButton btnExportAll,
      @NonNull MaterialButton btnImportAll, @NonNull LinearLayout loadingState) {
    this.rootView = rootView;
    this.btnBackupDatabase = btnBackupDatabase;
    this.btnExportAll = btnExportAll;
    this.btnImportAll = btnImportAll;
    this.loadingState = loadingState;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentImportExportBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentImportExportBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_import_export, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentImportExportBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnBackupDatabase;
      MaterialButton btnBackupDatabase = ViewBindings.findChildViewById(rootView, id);
      if (btnBackupDatabase == null) {
        break missingId;
      }

      id = R.id.btnExportAll;
      MaterialButton btnExportAll = ViewBindings.findChildViewById(rootView, id);
      if (btnExportAll == null) {
        break missingId;
      }

      id = R.id.btnImportAll;
      MaterialButton btnImportAll = ViewBindings.findChildViewById(rootView, id);
      if (btnImportAll == null) {
        break missingId;
      }

      id = R.id.loadingState;
      LinearLayout loadingState = ViewBindings.findChildViewById(rootView, id);
      if (loadingState == null) {
        break missingId;
      }

      return new FragmentImportExportBinding((CoordinatorLayout) rootView, btnBackupDatabase,
          btnExportAll, btnImportAll, loadingState);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
